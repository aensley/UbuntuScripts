#!/usr/bin/env bash

PRODUCT_NAME='xmr-stak'
CONFIG_DIR="/etc/${PRODUCT_NAME}/"
CONFIG_FILE="${CONFIG_DIR}${PRODUCT_NAME}.conf"
POOL_FILE="${CONFIG_DIR}pools.conf"
CPU_FILE="${CONFIG_DIR}cpu.conf"
NVIDIA_FILE=""
AMD_FILE=""
NVIDIA_CMD=""
AMD_CMD=""
NVIDIA_COMPILE="-DCUDA_ENABLE=OFF"
AMD_COMPILE="-DOpenCL_ENABLE=OFF"
INSTALL_DIR="/opt/${PRODUCT_NAME}/"
EXECUTABLE="${INSTALL_DIR}build/bin/${PRODUCT_NAME}"
LOG_FILE="/var/log/${PRODUCT_NAME}.log"
LOG_FILE_ESCAPED="\\/var\\/log\\/${PRODUCT_NAME}.log"
TASK="install"
if [ -d "${INSTALL_DIR}" ]; then
  TASK="upgrade"
fi
RESET_CONFIG=""
WALLET=""
PASSWORD=""
URL="gulf.moneroocean.stream:20001"
BEST_CONF=""
NVIDIA=""
AMD=""

usage() {
  echo "Usage: ${0##*/} [-w Wallet address] [-p Password] [-u Pool URL]"
  echo
  echo "General Options:"
  echo "  -r    Remove/Uninstall"
  echo "  -f    Remove/reset configuration files (always off for upgrades)"
  echo "  -k    Keep existing configuration files (always on for upgrades)"
  echo "  -n    Enable Nvidia GPU support"
  echo "  -a    Enable AMD GPU support"
  echo
  echo "Installation options:"
  echo "  -w    Wallet address"
  echo "  -p    Password"
  echo "  -u    Pool URL"
  echo
}

getArgs(){
  while getopts ":hrfknaw:p:u:" opt; do
    case ${opt} in
      h )
        usage
        exit
        ;;
      r )
        if [ -d "${INSTALL_DIR}" ]; then
          TASK="uninstall"
        else
          echo "Nothing to uninstall" 1>&2
          exit 1
        fi
        ;;
      f )
        RESET_CONFIG="reset"
        ;;
      k )
        RESET_CONFIG="keep"
        ;;
      n )
        NVIDIA="1"
        NVIDIA_FILE="${CONFIG_DIR}nvidia.conf"
        NVIDIA_CMD=" --nvidia ${NVIDIA_FILE}"
        NVIDIA_COMPILE="-DCUDA_ENABLE=ON"
        #NVIDIA_COMPILE="-DCUDA_ENABLE=ON -DCUDA_ARCH=30 -DXMR-STAK_LARGEGRID=OFF -DXMR-STAK_THREADS=44"
        ;;
      a )
        AMD="1"
        AMD_FILE="${CONFIG_DIR}amd.conf"
        AMD_CMD=" --amd ${AMD_FILE}"
        AMD_COMPILE="-DOpenCL_ENABLE=ON"
        ;;
      w )
        WALLET=$OPTARG
        ;;
      p )
        PASSWORD=$OPTARG
        ;;
      u )
        URL=$OPTARG
        ;;
      \? )
        echo "ERROR: Invalid option: $OPTARG" 1>&2
        echo
        usage
        exit 1
        ;;
      : )
        echo "ERROR: Invalid option: $OPTARG requires a value" 1>&2
        echo
        usage
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))
}

power2() {
  if ! type bc >/dev/null; then
    if   [ "$1" -gt "8192" ]; then
      echo "8192"
    elif [ "$1" -gt "4096" ]; then
      echo "4096"
    elif [ "$1" -gt "2048" ]; then
      echo "2048"
    elif [ "$1" -gt "1024" ]; then
      echo "1024"
    elif [ "$1" -gt "512" ]; then
      echo "512"
    elif [ "$1" -gt "256" ]; then
      echo "256"
    elif [ "$1" -gt "128" ]; then
      echo "128"
    elif [ "$1" -gt "64" ]; then
      echo "64"
    elif [ "$1" -gt "32" ]; then
      echo "32"
    elif [ "$1" -gt "16" ]; then
      echo "16"
    elif [ "$1" -gt "8" ]; then
      echo "8"
    elif [ "$1" -gt "4" ]; then
      echo "4"
    elif [ "$1" -gt "2" ]; then
      echo "2"
    else
      echo "1"
    fi
  else 
    echo "x=l($1)/l(2); scale=0; 2^((x+0.5)/1)" | bc -l;
  fi
}

expectedXmrCpuHashRate() {

  # forked from: https://moneroocean.stream/miner/setup_moneroocean_miner.sh

  if ! which lscpu >/dev/null; then
    echo "ERROR: This script requires \"lscpu\" utility to work correctly"
    return
  fi

  CPU_THREADS=$(nproc)
  EXP_MONERO_HASHRATE=$(( CPU_THREADS * 700 / 1000))
  if [ -z $EXP_MONERO_HASHRATE ]; then
    echo "ERROR: Can't compute projected Monero CN hashrate"
    exit 1
  fi

  PORT=$(( $EXP_MONERO_HASHRATE * 30 ))
  PORT=$(( $PORT == 0 ? 1 : $PORT ))
  PORT=`power2 $PORT`
  PORT=$(( 10000 + $PORT ))
  if [ -z $PORT ]; then
    echo "ERROR: Can't compute port"
    exit 1
  fi

}

createDonateLevelH() {
  cat >/tmp/donate-level.hpp <<EOL
#pragma once

constexpr double fDevDonationLevel = 0.0;
EOL

  sudo mv -f /tmp/donate-level.hpp ${INSTALL_DIR}xmrstak/donate-level.hpp
  sudo chown root:root ${INSTALL_DIR}xmrstak/donate-level.hpp
}

createService() {
  cat >/tmp/${PRODUCT_NAME}.service <<EOL
[Unit]
Description=XMR Stak Mining service

[Service]
ExecStart=${EXECUTABLE} --config ${CONFIG_FILE} --poolconf ${POOL_FILE} --cpu ${CPU_FILE}${NVIDIA_CMD}${AMD_CMD}
Nice=10

[Install]
WantedBy=multi-user.target
EOL

  sudo mv /tmp/${PRODUCT_NAME}.service /etc/systemd/system/${PRODUCT_NAME}.service
  sudo chown root:root /etc/systemd/system/${PRODUCT_NAME}.service
}

createLogRotateFile() {
  cat >/tmp/${PRODUCT_NAME} <<EOL
${LOG_FILE} {
        weekly
        rotate 4
        missingok
        create 644 root root
        compress
        notifempty
}
EOL

  sudo mv /tmp/${PRODUCT_NAME} /etc/logrotate.d/${PRODUCT_NAME}
  sudo chown root:root /etc/logrotate.d/${PRODUCT_NAME}
}

deleteFirstAndLastLine() {
  sudo sed -i '1d' $1
  sudo sed -i '$d' $1
  sudo sed -i '$d' $1
}

createConfigFile() {
  sudo mkdir -p ${CONFIG_DIR}
  sudo cp ${INSTALL_DIR}xmrstak/config.tpl ${CONFIG_FILE}
  deleteFirstAndLastLine ${CONFIG_FILE}
  sudo sed -i 's/"use_slow_memory" : *"[^"]*",/"use_slow_memory" : "never",/' ${CONFIG_FILE}
  sudo sed -i 's/"verbose_level" : 3,/"verbose_level" : 4,/' ${CONFIG_FILE}
  sudo sed -i 's/"daemon_mode" : false,/"daemon_mode" : true,/' ${CONFIG_FILE}
  sudo sed -i 's/"output_file" : "",/"output_file" : "'${LOG_FILE_ESCAPED}'",/' ${CONFIG_FILE}
  sudo cp ${INSTALL_DIR}xmrstak/pools.tpl ${POOL_FILE}
  deleteFirstAndLastLine ${POOL_FILE}
  sudo sed -i 's/POOLCONF/{"pool_address" : "'${URL}'", "wallet_address" : "'${WALLET}'", "pool_password" : "'${PASSWORD}'", "use_nicehash" : false, "rig_id" : "", "use_tls" : true, "tls_fingerprint" : "", "pool_weight" : 1 },/' ${POOL_FILE}
  sudo sed -i 's/CURRENCY/monero7/' ${POOL_FILE}
}

uninstall() {
  echoheader "Uninstalling ${PRODUCT_NAME}"
  sudo systemctl stop ${PRODUCT_NAME}.service
  sudo systemctl disable ${PRODUCT_NAME}.service
  sudo rm -f /etc/systemd/system/${PRODUCT_NAME}.service
  sudo systemctl daemon-reload
  sudo rm -f /etc/logrotate.d/${PRODUCT_NAME}
  sudo rm -f ${LOG_FILE}
  sudo rm -rf ${INSTALL_DIR}
  if [ -z "$RESET_CONFIG" ]; then
    echo -n "Remove configuration files? (y/N): "
    read -e removeConfig
    if [ "$removeConfig" = "y" ]; then
      RESET_CONFIG="reset"
    fi
  fi
  if [ "$RESET_CONFIG" = "reset" ]; then
    sudo rm -rf ${CONFIG_DIR}
  fi
  sudo sed -i 's/vm.nr_hugepages=128//' /etc/sysctl.conf
  sudo sed -i 's/* soft memlock 262144//' /etc/security/limits.conf
  sudo sed -i 's/* hard memlock 262144//' /etc/security/limits.conf
  echoheader "Finished!"
}

upgrade() {
  # Upgrade from latest upstream source while keeping current configuration.
  echoheader "Upgrading ${PRODUCT_NAME}"
  sudo systemctl stop ${PRODUCT_NAME}.service
  cd ${INSTALL_DIR} && \
  sudo git clean -fdx --quiet && \
  sudo git checkout -f --quiet && \
  sudo git pull && \
  createDonateLevelH && \
  sudo mkdir -p ${INSTALL_DIR}build/ && \
  cd ${INSTALL_DIR}build/ && \
  sudo cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DMICROHTTPD_ENABLE=OFF \
    -DOpenSSL_ENABLE=ON \
    -DXMR-STAK_CURRENCY=monero \
    -DXMR-STAK_COMPILE=native \
    -DCPU_ENABLE=ON \
    -DHWLOC_ENABLE=ON \
    ${NVIDIA_COMPILE} \
    ${AMD_COMPILE} && \
  sudo make && \
  sudo systemctl start ${PRODUCT_NAME}.service
  sudo systemctl --no-pager --full status ${PRODUCT_NAME}.service
  echoheader "Finished!"
}

install() {
  # Install
  echoheader "Installing ${PRODUCT_NAME}"
  expectedXmrCpuHashRate
  echoheader

  ## Build
  # NVIDIA: nvidia-cuda-dev nvidia-cuda-toolkit
  sudo apt -y install git libmicrohttpd-dev libssl-dev cmake build-essential libhwloc-dev && \
  sudo git clone https://github.com/fireice-uk/${PRODUCT_NAME}.git ${INSTALL_DIR} && \
  createDonateLevelH && \
  sudo mkdir -p ${INSTALL_DIR}build/ && \
  cd ${INSTALL_DIR}build/ && \
  sudo cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DMICROHTTPD_ENABLE=OFF \
    -DOpenSSL_ENABLE=ON \
    -DXMR-STAK_CURRENCY=monero \
    -DXMR-STAK_COMPILE=native \
    -DCPU_ENABLE=ON \
    -DHWLOC_ENABLE=ON \
    ${NVIDIA_COMPILE} \
    ${AMD_COMPILE} && \
  sudo make

  ## System Configuration
  sudo sysctl -w vm.nr_hugepages=128
  # Remove existing lines to prevent duplicates
  sudo sed -i 's/vm.nr_hugepages=128//' /etc/sysctl.conf
  sudo sed -i 's/* soft memlock 262144//' /etc/security/limits.conf
  sudo sed -i 's/* hard memlock 262144//' /etc/security/limits.conf
  # Add large page support settings
  echo "vm.nr_hugepages=128" | sudo tee -a /etc/sysctl.conf
  echo "* soft memlock 262144" | sudo tee -a /etc/security/limits.conf
  echo "* hard memlock 262144" | sudo tee -a /etc/security/limits.conf

  ## Service
  createService
  sudo systemctl daemon-reload
  sudo systemctl enable ${PRODUCT_NAME}.service

  ## Log file
  sudo touch ${LOG_FILE}
  createLogRotateFile

  ## Configuration
  if [ -f ${CONFIG_FILE} ]; then
    if [ -z "$RESET_CONFIG" ]; then
      echo -n "Existing configuration found. Overwrite with default config? (y/N): "
      read -e removeConfig
      if [ "$removeConfig" = "y" ]; then
        RESET_CONFIG="reset"
      else
        RESET_CONFIG="keep"
      fi
    fi
  else
    RESET_CONFIG="reset"
  fi

  if [ "$RESET_CONFIG" = "reset" ]; then
    while [ -z "$WALLET" ]; do
      echo
      echo -n "Enter wallet address: "
      read -e WALLET
    done

    while [ -z "$PASSWORD" ]; do
      echo
      echo -n "Enter password (MinerID:EmailAddress): "
      read -e PASSWORD
    done

    createConfigFile
  fi

  sudo systemctl start ${PRODUCT_NAME}.service
  sudo systemctl --no-pager --full status ${PRODUCT_NAME}.service

  ## Finished
  echo
  echo
  echo "All set!"
  echo
  echo "Be sure to check the configuration files for optimum settings:"
  echo "    ${CONFIG_FILE}"
  echo "    ${CPU_FILE}"
  if [ -n "$NVIDIA" ]; then
    echo "    ${NVIDIA_FILE}"
  fi
  if [ -n "$AMD" ]; then
    echo "    ${AMD_FILE}"
  fi
  echo
  echo "To make configuration file changes effective, restart the service:"
  echo "    sudo systemctl restart ${PRODUCT_NAME}.service"
  echo
  echoheader "Finished!"
}

getArgs $@

# Perform the requested task.
eval "${TASK}"
