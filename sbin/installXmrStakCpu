#!/usr/bin/env bash

PRODUCT_NAME='xmr-stak-cpu'
CONFIG_FILE="/etc/${PRODUCT_NAME}.conf"
INSTALL_DIR="/opt/${PRODUCT_NAME}/"
EXECUTABLE="${INSTALL_DIR}bin/${PRODUCT_NAME}"
LOG_FILE="/var/log/${PRODUCT_NAME}.log"
LOG_FILE_ESCAPED="\\/var\\/log\\/${PRODUCT_NAME}.log"
TASK="install"
if [ -d "${INSTALL_DIR}" ]; then
  TASK="upgrade"
fi
RESET_CONFIG=""
WALLET=""
PASSWORD=""
URL="gulf.moneroocean.stream:10001"
BEST_CONF=""

getArgs(){
  while getopts ":hrfkw:p:u:" opt; do
    case ${opt} in
      h )
        echo "Usage: ${0##*/} [-w Wallet address] [-p Password] [-u Pool URL]"
        echo
        echo "General Options:"
        echo "  -r    Remove/Uninstall"
        echo "  -f    Remove/reset configuration file (always off for upgrades)"
        echo "  -k    Keep existing configuration file (always on for upgrades)"
        echo
        echo "Installation options:"
        echo "  -w    Wallet address"
        echo "  -p    Password"
        echo "  -u    Pool URL"
        echo
        exit
        ;;
      r )
        if [ -d "${INSTALL_DIR}" ]; then
          TASK="uninstall"
        else
          echo "Nothing to uninstall" 1>&2
          exit 1
        fi
        ;;
      f )
        RESET_CONFIG="reset"
        ;;
      k )
        RESET_CONFIG="keep"
        ;;
      w )
        WALLET=$OPTARG
        ;;
      p )
        PASSWORD=$OPTARG
        ;;
      u )
        URL=$OPTARG
        ;;
      \? )
        echo "Invalid option: $OPTARG" 1>&2
        exit 1
        ;;
      : )
        echo "Invalid option: $OPTARG requires an argument" 1>&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))
}

expectedXmrCpuHashRate() {

  # forked from: https://moneroocean.stream/miner/setup_moneroocean_miner.sh

  if ! which lscpu >/dev/null; then
    echo "ERROR: This script requires \"lscpu\" utility to work correctly"
    return
  fi

  LSCPU=`lscpu`
  CPU_SOCKETS=`echo "$LSCPU" | grep "^Socket(s):" | cut -d':' -f2 | sed "s/^[ \t]*//"`
  if [ -z $CPU_SOCKETS ]; then
    echo "ERROR: Can't get CPU sockets from lscpu output"
    return
  fi
  CPU_CORES_PER_SOCKET=`echo "$LSCPU" | grep "^Core(s) per socket:" | cut -d':' -f2 | sed "s/^[ \t]*//"`
  if [ -z $CPU_CORES_PER_SOCKET ]; then
    echo "ERROR: Can't get CPU cores per socket from lscpu output"
    return
  fi
  CPU_THREADS=`echo "$LSCPU" | grep "^CPU(s):" | cut -d':' -f2 | sed "s/^[ \t]*//"`
  if [ -z $CPU_THREADS ]; then
    echo "ERROR: Can't get CPU cores from lscpu output"
    return
  fi
  CPU_MHZ=`echo "$LSCPU" | grep "^CPU MHz:" | cut -d':' -f2 | sed "s/^[ \t]*//"`
  CPU_MHZ=${CPU_MHZ%.*}
  if [ -z $CPU_MHZ ]; then
    echo "ERROR: Can't get CPU MHz from lscpu output"
    return
  fi
  CPU_L1_CACHE=`echo "$LSCPU" | grep "^L1d cache:" | cut -d':' -f2 | sed "s/^[ \t]*//" | sed "s/K\$//"`
  if [ -z $CPU_L1_CACHE ]; then
    echo "ERROR: Can't get L1 CPU cache from lscpu output"
    return
  fi
  CPU_L2_CACHE=`echo "$LSCPU" | grep "^L2 cache:" | cut -d':' -f2 | sed "s/^[ \t]*//" | sed "s/K\$//"`
  if [ -z $CPU_L2_CACHE ]; then
    echo "ERROR: Can't get L2 CPU cache from lscpu output"
    return
  fi
  CPU_L3_CACHE=`echo "$LSCPU" | grep "^L3 cache:" | cut -d':' -f2 | sed "s/^[ \t]*//" | sed "s/K\$//"`
  if [ -z $CPU_L3_CACHE ]; then
    echo "ERROR: Can't get L3 CPU cache from lscpu output"
    return
  fi

  TOTAL_CACHE=$(( $CPU_THREADS*$CPU_L1_CACHE + $CPU_SOCKETS * ($CPU_CORES_PER_SOCKET*$CPU_L2_CACHE + $CPU_L3_CACHE)))
  if [ -z $TOTAL_CACHE ]; then
    echo "ERROR: Can't compute total cache"
    return
  fi
  EXP_MONERO_HASHRATE=$(( ($CPU_THREADS < $TOTAL_CACHE / 2048 ? $CPU_THREADS : $TOTAL_CACHE / 2048) * ($CPU_MHZ * 20 / 1000) ))
  if [ -z $EXP_MONERO_HASHRATE ]; then
    echo "ERROR: Can't compute projected Monero hashrate"
    return
  fi

  echo "CPU Threads:        $CPU_THREADS"
  echo "CPU Speed:          $CPU_MHZ MHz"
  echo "CPU Cache:          ${TOTAL_CACHE}KB"
  echo "Projected hashrate: ~$EXP_MONERO_HASHRATE H/s"

}

createDonateLevelH() {
  cat >/tmp/donate-level.h <<EOL
#pragma once

constexpr double fDevDonationLevel = 0.0;
EOL

  sudo mv -f /tmp/donate-level.h ${INSTALL_DIR}donate-level.h
  sudo chown root:root ${INSTALL_DIR}donate-level.h
}

createService() {
  cat >/tmp/${PRODUCT_NAME}.service <<EOL
[Unit]
Description=XMR Stak CPU Mining service

[Service]
ExecStart=${EXECUTABLE} ${CONFIG_FILE}
Nice=10

[Install]
WantedBy=multi-user.target
EOL

  sudo mv /tmp/${PRODUCT_NAME}.service /etc/systemd/system/${PRODUCT_NAME}.service
  sudo chown root:root /etc/systemd/system/${PRODUCT_NAME}.service
}

createLogRotateFile() {
  cat >/tmp/${PRODUCT_NAME} <<EOL
${LOG_FILE} {
        weekly
        rotate 4
        missingok
        create 644 root root
        compress
        notifempty
}
EOL

  sudo mv /tmp/${PRODUCT_NAME} /etc/logrotate.d/${PRODUCT_NAME}
  sudo chown root:root /etc/logrotate.d/${PRODUCT_NAME}
}

createConfigFile() {
  sudo cp ${INSTALL_DIR}config.txt ${CONFIG_FILE}
  BEST_CONF=`sudo ${EXECUTABLE} ${CONFIG_FILE} | sed -n "/BEGIN/, /END/ p" | grep -v '\*'`
  sudo perl -i -0pe "s/\"cpu_threads_conf\" :\s+null,/$BEST_CONF/g" ${CONFIG_FILE}
  sudo sed -i 's/"use_slow_memory" : *"[^"]*",/"use_slow_memory" : "no_mlck",/' ${CONFIG_FILE}
  sudo sed -i 's/"verbose_level" : 3,/"verbose_level" : 4,/' ${CONFIG_FILE}
  sudo sed -i 's/"daemon_mode" : false,/"daemon_mode" : true,/' ${CONFIG_FILE}
  sudo sed -i 's/"output_file" : "",/"output_file" : "'${LOG_FILE_ESCAPED}'",/' ${CONFIG_FILE}
  sudo sed -i 's/"pool_address" : *"[^"]*",/"pool_address" : "'${URL}'",/' ${CONFIG_FILE}
  sudo sed -i 's/"wallet_address" : *"[^"]*",/"wallet_address" : "'${WALLET}'",/' ${CONFIG_FILE}
  sudo sed -i 's/"pool_password" : *"[^"]*",/"pool_password" : "'${PASSWORD}'",/' ${CONFIG_FILE}
}

uninstall() {
  echoheader "Uninstalling ${PRODUCT_NAME}"
  sudo systemctl stop ${PRODUCT_NAME}.service
  sudo systemctl disable ${PRODUCT_NAME}.service
  sudo rm -f /etc/systemd/system/${PRODUCT_NAME}.service
  sudo systemctl daemon-reload
  sudo rm -f /etc/logrotate.d/${PRODUCT_NAME}
  sudo rm -f ${LOG_FILE}
  sudo rm -rf ${INSTALL_DIR}
  if [ -z "$RESET_CONFIG" ]; then
    echo -n "Remove configuration file? (y/N): "
    read -e removeConfig
    if [ "$removeConfig" = "y" ]; then
      RESET_CONFIG="reset"
    fi
  fi
  if [ "$RESET_CONFIG" = "reset" ]; then
    sudo rm -f ${CONFIG_FILE}
  fi
  sudo sed -i 's/vm.nr_hugepages=128//' /etc/sysctl.conf
  sudo sed -i 's/* soft memlock 262144//' /etc/security/limits.conf
  sudo sed -i 's/* hard memlock 262144//' /etc/security/limits.conf
  echoheader "Finished!"
}

upgrade() {
  # Upgrade from latest upstream source while keeping current configuration.
  echoheader "Upgrading ${PRODUCT_NAME}"
  sudo systemctl stop ${PRODUCT_NAME}.service
  cd ${INSTALL_DIR} && \
  sudo git clean -fdx --quiet && \
  sudo git checkout -f --quiet && \
  sudo git pull && \
  createDonateLevelH && \
  sudo cmake -DMICROHTTPD_ENABLE=OFF -DOpenSSL_ENABLE=OFF -DHWLOC_ENABLE=ON . && \
  sudo make && \
  sudo systemctl start ${PRODUCT_NAME}.service
  sudo systemctl --no-pager --full status ${PRODUCT_NAME}.service
  echoheader "Finished!"
}

install() {
  # Install
  echoheader "Installing ${PRODUCT_NAME}"
  expectedXmrCpuHashRate
  echoheader

  ## Build
  sudo apt -y install git libmicrohttpd-dev libssl-dev cmake build-essential libhwloc-dev && \
  sudo git clone https://github.com/fireice-uk/${PRODUCT_NAME}.git ${INSTALL_DIR} && \
  createDonateLevelH && \
  cd ${INSTALL_DIR} && \
  sudo cmake -DMICROHTTPD_ENABLE=OFF -DOpenSSL_ENABLE=OFF -DHWLOC_ENABLE=ON . && \
  sudo make

  ## System Configuration
  sudo sysctl -w vm.nr_hugepages=128
  sudo sed -i 's/vm.nr_hugepages=128//' /etc/sysctl.conf
  sudo sed -i 's/* soft memlock 262144//' /etc/security/limits.conf
  sudo sed -i 's/* hard memlock 262144//' /etc/security/limits.conf
  echo "vm.nr_hugepages=128" | sudo tee -a /etc/sysctl.conf
  echo "* soft memlock 262144" | sudo tee -a /etc/security/limits.conf
  echo "* hard memlock 262144" | sudo tee -a /etc/security/limits.conf

  ## Service
  createService
  sudo systemctl daemon-reload
  sudo systemctl enable ${PRODUCT_NAME}.service

  ## Log file
  sudo touch ${LOG_FILE}
  createLogRotateFile

  ## Configuration
  if [ -f ${CONFIG_FILE} ]; then
    if [ -z "$RESET_CONFIG" ]; then
      echo -n "Existing configuration found. Overwrite with default config? (y/N): "
      read -e removeConfig
      if [ "$removeConfig" = "y" ]; then
        RESET_CONFIG="reset"
      else
        RESET_CONFIG="keep"
      fi
    fi
  else
    RESET_CONFIG="reset"
  fi

  if [ "$RESET_CONFIG" = "reset" ]; then
    while [ -z "$WALLET" ]; do
      echo
      echo -n "Enter wallet address: "
      read -e WALLET
    done

    while [ -z "$PASSWORD" ]; do
      echo
      echo -n "Enter password (MinerID:EmailAddress): "
      read -e PASSWORD
    done

    createConfigFile
  fi

  sudo systemctl start ${PRODUCT_NAME}.service
  sudo systemctl --no-pager --full status ${PRODUCT_NAME}.service

  ## Finished
  echo
  echo "This is the best configuration ${PRODUCT_NAME}"
  echo "has automatically detected for this system:"
  echo "$BEST_CONF"
  echo
  echo "If you need to change this, be sure to edit the config file:"
  echo "    sudo nano ${CONFIG_FILE}"
  echo
  echo "You should also check the port used in \"pool_address\" the same way."
  echo "    Available ports: https://moneroocean.stream/#/ports"
  echo
  echo "To make your changes effective, restart the service:"
  echo "    sudo systemctl restart ${PRODUCT_NAME}.service"
  echo
  echoheader "Finished!"
}

getArgs $@

# Perform the requested task.
eval "${TASK}"
